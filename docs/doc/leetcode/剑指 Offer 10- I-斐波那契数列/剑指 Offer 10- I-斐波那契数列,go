package main

// 剑指 Offer 10- I-斐波那契数列
func fib(n int) int {
	if n == 0 {
		return 0
	}
	dp := mkae([]int, n+1)
	dp[0], dp[1] = 0, 1
	for i := 2; i <= n; i++ {
		dp[i] = (dp[i-1] + dp[i-2]) % (1e9 + 7)
	}
	return dp[n]
}

func fib1(n int) int {
	if n == 0 {
		return 0
	}
	if n == 1 {
		return 1
	}

	return fib1(n-2) + fib1(n-1)
}

// 双百
func fib3(n int) int {
	if n == 0 {
		return 0
	}
	// 在原本的基础上在优化，只需要记录前两个值即可
	dp1, dp2 := 0, 1
	for i := 2; i <= n; i++ {
		temp := dp1 + dp2
		dp1, dp2 = dp2, temp
	}
	return dp2
}
