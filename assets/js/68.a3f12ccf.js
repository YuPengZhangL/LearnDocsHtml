(window.webpackJsonp=window.webpackJsonp||[]).push([[68],{455:function(s,a,n){"use strict";n.r(a);var e=n(10),t=Object(e.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h3",{attrs:{id:"缓存技术-cache"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缓存技术-cache"}},[s._v("#")]),s._v(" 缓存技术(Cache)")]),s._v(" "),a("h4",{attrs:{id:"_1-缓存的概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-缓存的概念"}},[s._v("#")]),s._v(" 1. 缓存的概念")]),s._v(" "),a("div",{staticClass:"language-text line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("1) 缓存存是数据交互的缓冲区域，简称cache，当某一个硬件想要读取数据是，会首选从缓存中获取数据，有则直接执行，或者返回，如果没有，去内存中获取。缓存的数据比内存的数据快很多。所以缓存的作用就是让硬件更快速的运行缓存基本上都是RAM，即断电即掉的非永久性存储，所以一般使用完后后，会将数据写入内存中去。\n\n2) 缓存的作用是什么?\n    A) 操作系统磁盘缓存————》减少磁盘机械操作\n    B) 数据库缓存————》减少对数据库的查询\n    C) Web服务器缓存————》减少对应用服务器的请求。\n    D) 客户端浏览器缓存————》减少对网站的访问。\n\n3) 缓存的原理是什么？\n    A) 将数据副本存入速度更快的存储设备\n    B) 将数据存储到与使用者更接近的位置存储\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("h4",{attrs:{id:"_2-缓存击穿"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-缓存击穿"}},[s._v("#")]),s._v(" 2. 缓存击穿")]),s._v(" "),a("div",{staticClass:"language-text line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("1) 缓存击穿的概念\n    如果我们为缓存中的大部分数据设置了相同的过期时间，则到了某一时刻，缓存中的数据就会批量过期。\n\n2) 产生缓存击穿的原因是什么？\n    如果缓存中的数据在某个时刻批量过期，导致大部分用户的请求都会直接落在数据库上，或者构成逻辑上不存在的数据，然后大量发送这个请求到数据库，每次都这样，导致数据库崩溃或者挂掉，这种现象就叫作缓存击穿\n\n3) 如何解决缓存击穿？\n    A) 对于热点数据分配比较合理的过期时间，避免同一时刻失效，确保热点期间key不会过期，或者设置热点数据永不过期\n    B) 使用分布式锁，保证对于每个 Key 同时只有一个线程去查询后端的服务，某个线程在查询后端服务的同时，其他线程没有获得分布式锁的权限，需要进行等待\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("h4",{attrs:{id:"_3-缓存雪崩"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-缓存雪崩"}},[s._v("#")]),s._v(" 3. 缓存雪崩")]),s._v(" "),a("div",{staticClass:"language-text line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("1) 缓存雪崩\n    如果缓存系统出现故障，所有的并发流量就会直接到达数据库\n\n2) 产生雪崩原因是什么？\n    在某一时刻缓存集中失效，或者缓存系统出现故障，所有的并发流量就会直接到达数据库。数据存储层的调用量就会暴增，导致数据库被大流量压垮，这种级联式的服务故障，就叫作缓存雪崩\n\n3） 如何解决缓存雪崩？\n    A) 不同的热点key设置不同的过期时间(随机值)，缓存失效时间均匀分布\n    B) 使用高可用分布式集群，确保缓存的高可用(设置二级缓存，一级缓存失效，访问二级缓存，不会直接落到DB)\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("h4",{attrs:{id:"_4-缓存穿透"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-缓存穿透"}},[s._v("#")]),s._v(" 4. 缓存穿透")]),s._v(" "),a("div",{staticClass:"language-text line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("1) 缓存穿透\n    如果在请求数据时，在缓存层和数据库层都没有找到符合条件的数据，也就是说，在缓存层和数据库层都没有命中数据，那么，这种情况就叫作缓存穿透\n\n2) 产生缓存穿透原因是什么？\n    查询某个 Key 对应的数据，Redis 缓存中没有相应的数据，则直接到数据库中查询。\n    数据库中也不存在要查询的数据，则数据库会返回空，而 Redis 也不会缓存这个空结果。\n    这就造成每次通过这样的 Key 去查询数据都会直接到数据库中查询，Redis 不会缓存空结果。这就造成了缓存穿透的问题\n\n3） 如何解决缓存穿透？\n    A) 在业务层进行判断，不合法的请求直接返回\n    B) 把不合法对象缓存起来，当第一次从数据库中查询出来的结果为空时，我们就将这个空对象加载到缓存，并设置合理的过期时间\n    C) 使用布隆过滤器，布隆过滤器可以针对大数据量的、有规律的键值进行处理。一条记录是不是存在，本质上是一个 Bool 值，只需要使用 1bit 就可以存储\n    (布隆过滤器: 如果数据不存在，那可以判断出来一定不存在，如果判断数据存在，那么数据可能存在)\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("h4",{attrs:{id:"_5-缓存一致性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-缓存一致性"}},[s._v("#")]),s._v(" 5. 缓存一致性")]),s._v(" "),a("div",{staticClass:"language-text line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("1) 缓存一致性\n    当数据实效性要求非常高的时候，需要保证缓存中的数据和数据库中的数据保持高度一致，需要保证缓存结点和缓存副本中的数据也是一致的，不能出现差异(集群同步)\n\n2) 产生缓存一致性原因是什么？\n    多个请求数据读写不一致，A 的写请求淘汰了cache，修改了数据库中的数据，B的读请求开始，当前cache为空，重新去数据库读取，这是A请求没有完成写，就会造成脏数据写入cache，下一次请求依旧是无效的数据.\n\n3） 如何解决缓存一致性？\n    在数据库发生更新时，主动更新缓存或者清除旧的缓存\n\n4) 缓存一致性协议(MESI),存行中数据具有四种状态\n    A) Modified（修改）：数据有效，数据被修改了，和内存中数据不一致，数据只存在于本Cache中。\n    \n    B) Exclusive（独享）：数据有效，数据和内存中的数据一致，数据只存在于本Cache中。\n    \n    C) Shared（共享）：数据有效，数据和内存中的数据一致，数据存在多个Cache中。\n    \n    D) Invalid（无效）：数据无效，一旦数据被标记为无效，那效果就等同于它从来没被加载到缓存中。\n\n5) 数据的四中读写操作\n    A) local read（从缓存中读取）\n    \n    B) local write（写入到缓存）\n    \n    C) remote read（读取其他 cpu 的缓存）\n    \n    D) remote write（写入到其他 cpu 的缓存中）\n    \n当内核需要访问的数据不在Cache中，而其它Cache有这份数据的备份时，当前Cache既可以从DB中导入数据，也可以从其它Cache中导入数据\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br")])])])}),[],!1,null,null,null);a.default=t.exports}}]);