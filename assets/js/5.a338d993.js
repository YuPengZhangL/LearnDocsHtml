(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{354:function(t,e,a){t.exports=a.p+"assets/img/二叉树结构.bb62a010.png"},355:function(t,e,a){t.exports=a.p+"assets/img/红黑树结构.9333d46f.png"},356:function(t,e,a){t.exports=a.p+"assets/img/B-Tree结构.a1dbc5b7.png"},357:function(t,e,a){t.exports=a.p+"assets/img/标准B+Tree结构.714d619d.png"},358:function(t,e,a){t.exports=a.p+"assets/img/B+Tree索引结构.31a0f107.png"},359:function(t,e,a){t.exports=a.p+"assets/img/Hash索引原理图.d9863982.png"},425:function(t,e,a){"use strict";a.r(e);var s=a(10),r=Object(s.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h3",{attrs:{id:"mysql-中的索引结构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mysql-中的索引结构"}},[t._v("#")]),t._v(" mysql 中的索引结构")]),t._v(" "),e("h4",{attrs:{id:"_1-索引结构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-索引结构"}},[t._v("#")]),t._v(" 1. 索引结构")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("mysql的索引结构是在存储引擎层实现的，不同的存储引擎有不同的结构，主要包含以下结构.")])]),t._v(" "),e("li",[e("strong",[t._v("平常如果没有特指索引的结构，那么默认指的是b+tree结构")])])]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"center"}},[t._v("索引结构")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("描述")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("B+Tree")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("最常见的索引类型，大部分引擎都支持B+树索引")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("Hash")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("底层数据结构是用哈希表实现，只有精确匹配索引列的查询才有效，不支持范围查询")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("R-Tree(空间索引)")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("空间索引是 MyISAM 引擎的一个特殊索引类型，主要用于地理空间数据类型，通常使用较少")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("Full-Text(全文索引)")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("是一种通过建立倒排索引，快速匹配文档的方式，类似于 Lucene, Solr, ES")])])])]),t._v(" "),e("ul",[e("li",[t._v("不同的存储引擎对索引的支持")])]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"center"}},[t._v("索引")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("InnoDB")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("MyISAM")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("Memory")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("B+Tree索引")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("支持")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("支持")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("支持")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("Hash索引")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("不支持")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("不支持")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("支持")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("R-Tree索引")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("不支持")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("支持")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("不支持")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("Full-text")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("5.6版本后支持")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("支持")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("不支持")])])])]),t._v(" "),e("h5",{attrs:{id:"_2-二叉树索引结构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-二叉树索引结构"}},[t._v("#")]),t._v(" 2. 二叉树索引结构")]),t._v(" "),e("h6",{attrs:{id:"_2-1-二叉树结构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-二叉树结构"}},[t._v("#")]),t._v(" 2.1 二叉树结构")]),t._v(" "),e("p",[e("img",{attrs:{src:a(354),alt:"image"}})]),t._v(" "),e("div",{staticClass:"language-text line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("二叉树的缺点：\n    顺序插入时，会形成一个单链表，查询性能大大降低，数据量比较大的情况下，树的高度比较高，索引速度比较慢.\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br")])]),e("h6",{attrs:{id:"_2-2-红黑树的索引结构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-红黑树的索引结构"}},[t._v("#")]),t._v(" 2.2 红黑树的索引结构")]),t._v(" "),e("p",[e("img",{attrs:{src:a(355),alt:"iamge"}})]),t._v(" "),e("div",{staticClass:"language-text line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("红黑树也存在大数据量情况下，层级较深，检索速度慢的问题。为了解决上述问题，可以使用 B-Tree 结构。\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("h6",{attrs:{id:"_2-3-b-tree索引结构-多路平衡查找树"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-b-tree索引结构-多路平衡查找树"}},[t._v("#")]),t._v(" 2.3 B-Tree索引结构(多路平衡查找树)")]),t._v(" "),e("p",[e("img",{attrs:{src:a(356),alt:"image"}})]),t._v(" "),e("h6",{attrs:{id:"_2-4-标准b-tree-结构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-标准b-tree-结构"}},[t._v("#")]),t._v(" 2.4 标准B+Tree 结构")]),t._v(" "),e("p",[e("img",{attrs:{src:a(357),alt:"image"}})]),t._v(" "),e("div",{staticClass:"language-text line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("与 B-Tree 的区别：\n    所有的数据都会出现在叶子节点\n    叶子节点形成一个单向链表\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br")])]),e("h6",{attrs:{id:"_2-5-b-tree-索引结构-优化之后的"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-b-tree-索引结构-优化之后的"}},[t._v("#")]),t._v(" 2.5 B+Tree 索引结构(优化之后的)")]),t._v(" "),e("p",[e("img",{attrs:{src:a(358),alt:"image"}})]),t._v(" "),e("div",{staticClass:"language-text line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("MySQL 索引数据结构对经典的 B+Tree 进行了优化。在原 B+Tree 的基础上，增加一个指向相邻叶子节点的链表指针，就形成了带有顺序指针的 B+Tree，提高区间访问的性能。\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("h5",{attrs:{id:"_3-hash-索引结构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-hash-索引结构"}},[t._v("#")]),t._v(" 3. hash 索引结构")]),t._v(" "),e("div",{staticClass:"language-text line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("哈希索引就是采用一定的hash算法，将键值换算成新的hash值，映射到对应的槽位上，然后存储在hash表中。\n如果两个（或多个）键值，映射到一个相同的槽位上，他们就产生了hash冲突（也称为hash碰撞），可以通过链表来解决。\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br")])]),e("h6",{attrs:{id:"_3-1-hash-索引原理图"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-hash-索引原理图"}},[t._v("#")]),t._v(" 3.1 hash 索引原理图")]),t._v(" "),e("p",[e("img",{attrs:{src:a(359),alt:"image"}})]),t._v(" "),e("h6",{attrs:{id:"_3-2-hash-索引的特点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-hash-索引的特点"}},[t._v("#")]),t._v(" 3.2 hash 索引的特点")]),t._v(" "),e("div",{staticClass:"language-text line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("特点：\n    Hash索引只能用于对等比较（=、in），不支持范围查询（between、>、&lt;、…）\n    无法利用索引完成排序操作\n    查询效率高，通常只需要一次检索就可以了，效率通常要高于 B+Tree 索引\n\n存储引擎支持：\n    Memory\n    InnoDB: 具有自适应hash功能，hash索引是存储引擎根据 B+Tree 索引在指定条件下自动构建的\n\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br")])])])}),[],!1,null,null,null);e.default=r.exports}}]);