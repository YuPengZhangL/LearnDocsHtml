(window.webpackJsonp=window.webpackJsonp||[]).push([[66],{449:function(s,a,n){"use strict";n.r(a);var e=n(10),r=Object(e.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h3",{attrs:{id:"redis-的事务机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redis-的事务机制"}},[s._v("#")]),s._v(" Redis 的事务机制")]),s._v(" "),a("h4",{attrs:{id:"_1-redis的事务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-redis的事务"}},[s._v("#")]),s._v(" 1. redis的事务")]),s._v(" "),a("div",{staticClass:"language-text line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("1) Redis 中事务是一个单独的隔离操作，事务中的所有命令都会序列化按顺序的执行.\n\n2) 使用MULTI(标记事务的开始), EXEC(标记队列开始执行), DISCARD(取消队列执行) 和 WATCH 命令来实现事务功能。\n\n    A) 事务中的所有命令都被序列化并按顺序执行。Redis执行事务期间，不会被其它客户端发送的命令打断，事务中的所有命令都作为一个隔离操作顺序执行。\n    B) Redis事务是原子操作，或者执行所有命令或者都不执行。 使用MULTI开始，所有命令都会被依次放进队列中，执行 EXEC 命令触发一个事务中所有命令的执行,要不全部执行，要不全没有执行.\n    C) 组队过程中可以通过discard放弃组队.\n\n3) 事务的错误处理\n    A) 组队阶段如果某个命令出现了错误，执行时整个队列都会被取消\n    B) 执行阶段某个命令出现了错误，只有报错的地方不会被执行，其他命令则会正常执行，不会进行回滚.\n\n4) 事务的锁机制\n    A) 悲观锁: 悲观锁是基于一种悲观的态度类来防止一切数据冲突，它是以一种预防的姿态在修改数据之前把数据锁住，然后再对数据进行读写，在它释放锁之前任何人都不能对其数据进行操作\n    i) 特点:  可以完全保证数据的独占性和正确性，因为每次请求都会先对数据进行加锁， 然后进行数据操作，最后再解锁，而加锁释放锁的过程会造成消耗，所以性能不高;\n\n    B) 乐观锁: 乐观锁是对于数据冲突保持一种乐观态度，操作数据时不会对操作的数据进行加锁（这使得多个任务可以并行的对数据进行操作），只有到数据提交的时候才通过一种机制来验证数据是否存在冲突(一般实现方式是通过加版本号然后进行版本号的对比方式实现)\n    i) 特点： 乐观锁是一种并发类型的锁，其本身不对数据进行加锁通而是通过业务实现锁的功能，不对数据进行加锁就意味着允许多个请求同时访问数据，同时也省掉了对数据加锁和解锁的过程，这种方式因为节省了悲观锁加锁的操作，所以可以一定程度的的提高操作的性能，不过在并发非常高的情况下，会导致大量的请求冲突，冲突导致大部分操作无功而返而浪费资源\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br")])]),a("h4",{attrs:{id:"_2-redis数据的持久化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-redis数据的持久化"}},[s._v("#")]),s._v(" 2. redis数据的持久化")]),s._v(" "),a("div",{staticClass:"language-text line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("redis 是一个内存数据库，数据保存在内存中，虽然内存中的数据读取速度非常快，但是容易发生丢失. Redis 提供了两种持久化的方式，分别是RDB（Redis DataBase）和AOF（Append Only File）\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h5",{attrs:{id:"_2-1-rdb-redis-database"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-rdb-redis-database"}},[s._v("#")]),s._v(" 2.1 RDB（Redis DataBase）")]),s._v(" "),a("p",[a("strong",[s._v("RDB 的概念")])]),s._v(" "),a("div",{staticClass:"language-text line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("1) RDB 方式，是将 redis 某一时刻的将 redis 存储的数据生成快照并存储到磁盘等介质上，是一种快照式的持久化方法。\n\n2) redis 在进行数据持久化的过程中，会先将数据写入到一个临时文件中，待持久化过程都结束了，才会用这个临时文件替换上次持久化好的文件\n\n3) 对于 RDB 方式，redis 会单独创建（fork）一个子进程来进行持久化，而主进程是不会进行任何 IO 操作的，可以确保了 redis 极高的性能\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[a("strong",[s._v("RDB 的触发机制")])]),s._v(" "),a("div",{staticClass:"language-text line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("1) save: 该命令会阻塞当前redis服务器，执行save期间，redis服务器不能执行其他命令，直到RDB完成.\n\n2) bgsave: 执行该命令时，redis会在后台异步进行RDB操作，生成快照的同时也可以继续响应客户端.redis 进程进行fork操作创建子进程，RDB持久化过程由子进程完成，完成后自动结束,不会阻塞主线程，但是执行 'bgsave' 之后执行的命令不会被拍进快照.\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h5",{attrs:{id:"_2-2-aof-append-only-file"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-aof-append-only-file"}},[s._v("#")]),s._v(" 2.2 AOF（Append Only File）")]),s._v(" "),a("p",[a("strong",[s._v("AOF 的概念")])]),s._v(" "),a("div",{staticClass:"language-text line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("1) AOF 方式，是将 redis 执行过的所有写指令记录下来，在下次 redis 重新启动时，只要把这些写指令从前到后再重复执行一遍，就可以实现数据恢复了\n\n2) 默认的 AOF 持久化策略是每秒钟 fsync 一次（fsync 是指把缓存中的写指令记录到磁盘中），因为在这种情况下，redis 仍然可以保持很好的处理性能，即使 redis 故障，也只会丢失最近 1 秒钟的数据\n\n3) 如果采用了AOF方式，不对AOF文件做任何处理的话，AOF 文件会变得越来越大，所以，redis 提供了 AOF 文件重写（rewrite）机制，即当 AOF 文件的大小超过所设定的阈值时，redis 就会启动 AOF 文件的内容压缩，只保留可以恢复数据的最小指令集\n\n4) 在进行 AOF 重写时，仍然是采用先写临时文件，全部完成后再替换的流程，所以断电、磁盘满等问题都不会影响 AOF 文件的可用性\n\n5) AOF 方式存在的缺陷，在同样数据规模的情况下，AOF 文件要比 RDB 文件的体积大，而且，AOF 方式的恢复速度也要慢于 RDB 方式\n\n6) 如果直接执行 'bgrewriteaof' 命令，那么 redis 会生成一个全新的 AOF 文件，其中便包括了可以恢复现有数据的最少的命令集\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[a("strong",[s._v("AOF 的原理")])]),s._v(" "),a("div",{staticClass:"language-text line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("1) 在进行AOF重写即将开始的时候，redis 会创建（fork）一个 '重写子进程' ，这个子进程会首先读取现有的 AOF 文件，并将其包含的指令进行分析压缩并写入到一个临时文件中。\n\n2) 与此同时，主工作进程会将新接收到的写指令一边累积到内存缓冲区中，一边继续写入到原有的 AOF 文件中，这样做是保证原有的 AOF 文件的可用性，避免在重写过程中出现意外。\n\n3） 当 '重写子进程' 完成重写工作后，它会给父进程发一个信号，父进程收到信号后就会将内存中缓存的写指令追加到新 AOF 文件中。\n\n4) 追加结束后，redis 就会用新 AOF 文件来代替旧 AOF 文件，之后再有新的写指令，就都会追加到新的 AOF 文件中了\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])])])}),[],!1,null,null,null);a.default=r.exports}}]);